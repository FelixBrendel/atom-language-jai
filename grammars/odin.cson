name: 'odin'
scopeName: 'source.odin'
fileTypes: ['odin']

repository: {

  #   #####
  #  #     #  ####  #    # #    # ###### #    # #####  ####
  #  #       #    # ##  ## ##  ## #      ##   #   #   #
  #  #       #    # # ## # # ## # #####  # #  #   #    ####
  #  #       #    # #    # #    # #      #  # #   #        #
  #  #     # #    # #    # #    # #      #   ##   #   #    #
  #   #####   ####  #    # #    # ###### #    #   #    ####

  'line_comment': {
    comment: 'Single-line comment'
    name: 'comment.line.odin'
    begin: '//'
    end: '$'
  }
  'block_comment': {
    comment: 'Block comment'
    name: 'comment.block.odin'
    begin: '/\\*'
    end: '\\*/'
    patterns: [
      { include: '#block_comment' }
    ]
  }

  'comments': {
    patterns: [
      { include: '#block_comment' }
      { include: '#line_comment' }
    ]
  }

  #  #
  #  #       # ##### ###### #####    ##   #       ####
  #  #       #   #   #      #    #  #  #  #      #
  #  #       #   #   #####  #    # #    # #       ####
  #  #       #   #   #      #####  ###### #           #
  #  #       #   #   #      #   #  #    # #      #    #
  #  ####### #   #   ###### #    # #    # ######  ####

  'literals': {
    patterns: [
      { include: '#string_literal' }
      { include: '#character_literal' }
      { include: '#number_literal' }
      { include: '#boolean_literal' }
      { include: '#null_literal' }
    ]
  }

  ## Strings

  'escaped_character': {
    name: 'constant.character.escape.odin'
    match: '\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
  }

  'string_literal': {
    comment: 'Double-quote string literal'
    name: 'string.quoted.double.odin'
    begin: '"'
    end: '"'
    patterns: [
      { include: '#escaped_character' }
    ]
  }

  'character_literal': {
    comment: 'Character literal'
    name: 'string.quoted.single.odin'
    match: '(b?\')(?:[^\'\\\\]|\\\\(?:x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))([^\']*)(\')'
    captures: {
      '1': { name: '' }
      '2': { name: 'invalid.illegal.odin' }
      '3': { name: '' }
    }
  }

  ## Numbers

  'number_literal': {
    patterns: [
      { include: '#floating_point_literal' }
      { include: '#integer_literal' }
    ]
  }

  'floating_point_literal': {
    patterns: [
      {
        comment: 'Floating point literal (basic)'
        name: 'constant.numeric.float.odin'
        match: '\\b([0-9][0-9_]*\\.[0-9][0-9_]*)\\b'
      }
      {
        comment: 'Floating point literal (typed)'
        name: 'constant.numeric.float.odin'
        match: '\\b([0-9][0-9_]*(?:\\.[0-9][0-9_]*)?)(f32|f64)\\b'
      }
      {
        comment: 'Floating point literal (exponent)'
        name: 'constant.numeric.float.odin'
        match: '\\b([0-9][0-9_]*(?:\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+)(f32|f64)?\\b'
      }
      {
        comment: 'Floating point literal (hexadecimal)'
        name: 'constant.numeric.integer.hexadecimal.odin'
        match: '\\b0h[a-fA-F0-9_]+\\b'
      }
    ]
  }

  'integer_literal': {
    patterns: [
      {
        comment: 'Integer literal (decimal)'
        name: 'constant.numeric.integer.decimal.odin'
        match: '\\b[0-9][0-9_]*\\b'
      }
      {
        comment: 'Integer literal (hexadecimal)'
        name: 'constant.numeric.integer.hexadecimal.odin'
        match: '\\b0x[a-fA-F0-9_]+\\b'
      }
      {
        comment: 'Integer literal (binary)'
        name: 'constant.numeric.integer.binary.odin'
        match: '\\b0b[01_]+\\b'
      }
    ]
  }

  ## Other

  'boolean_literal': {
    comment: 'Boolean constant'
    name: 'constant.language.boolean.odin'
    match: '\\b(true|false)\\b'
  }

  'null_literal': {
    name: 'constant.language.null.odin'
    match: '\\bnull\\b'
  }

  #  #    #
  #  #   #  ###### #   # #    #  ####  #####  #####   ####
  #  #  #   #       # #  #    # #    # #    # #    # #
  #  ###    #####    #   #    # #    # #    # #    #  ####
  #  #  #   #        #   # ## # #    # #####  #    #      #
  #  #   #  #        #   ##  ## #    # #   #  #    # #    #
  #  #    # ######   #   #    #  ####  #    # #####   ####

  'keywords':
    patterns: [
      { include: '#value_keywords' }
      { include: '#modifiers' }
      { include: '#control' }
      { include: '#imports' }
    ]

  'value_keywords':
    patterns: [
      { include: '#types' }
      { include: '#modifiers' }
      { include: '#special_variables' }
      { include: '#generic' }
    ]

  ## Modifiers

  'modifiers':
    patterns: [
      {
        comment: 'Storage modifier'
        name: 'storage.modifier.odin'
        match: '\\b(const|using|type|proc)\\b'
      }
    ]

  ## Types

  'types':
    patterns: [
      {
        name: 'storage.type.core.odin'
        match: '\\b(int|uint|float|bool|rune|string|vector|map|bit_field)\\b'
      }
      {
        name: 'storage.type.core.odin'
        match: '\\b(u8|u16|u32|u64|u128|f32|f64|i8|i16|i32|i128)\\b'
      }
      {
        name: 'storage.type.struct.core.odin'
        match: '\\b(dynamic)\\b'
      }
    ]

  ## Control

  'control':
    comment: 'Control keyword'
    name: 'keyword.control.odin'
    match: '\\b(if|else|do|when|for|in|defer|match|return)\\b'

  ## Control

  'imports':
    comment: 'Import keyword'
    name: 'keyword.control.odin'
    match: '\\b(import|import_load)\\b'

  ## Special values

  'special_variables':
    patterns: [
      { include: '#self' }
      { include: '#initializer' }
      {
        match: '\\bit\\b'
        name: 'variable.language.it.odin'
      }
    ]

  'self':
    comment: 'Self variable'
    name: 'variable.language.self.odin'
    match: '\\bself\\b'

  'initializer':
    comment: 'Empty struct initializer'
    name: 'constant.language.odin'
    match: '---'

  #  #######
  #  #     # #####  ###### #####    ##   #####  ####  #####   ####
  #  #     # #    # #      #    #  #  #    #   #    # #    # #
  #  #     # #    # #####  #    # #    #   #   #    # #    #  ####
  #  #     # #####  #      #####  ######   #   #    # #####       #
  #  #     # #      #      #   #  #    #   #   #    # #   #  #    #
  #  ####### #      ###### #    # #    #   #    ####  #    #  ####

  'operators': {
    patterns: [
      {
        comment: ''
        name: 'keyword.operator.odin'
        match: '->|:|\\.\\.'
      }
      {
        comment: 'Assignment operator'
        name: 'keyword.operator.assignment.odin'
        match: '\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|:=|='
      }
      {
        comment: 'Comparison operator'
        name: 'keyword.operator.comparison.odin'
        match: '&&|\\|\\||==|!=|<(?!<)|>(?!>)|>=|<='
      }
      {
        comment: 'Arithmetic operator'
        name: 'keyword.operator.arithmetic.odin'
        match: '!|\\+(?!\\+)|-(?!-)|/|\\*|%|\\^|&|\\||<<|>>|\\+\\+|--'
      }
      {
        comment: 'Common non-existant operators'
        name: 'invalid.illegal.odin'
        match: '' #'\\+\\+|--'
      }
      {
        comment: 'Keyword'
        name: 'keyword.other.odin'
        match: '\\b(var|let)\\b'
      }
    ]
  }

  # Punctuation

  'punctuation':
    patterns: [
      { include: '#punctuation_brackets' }
      { include: '#punctuation_parentheses' }
    ]

  'punctuation_brackets':
    comment: '[ and ]'
    name: 'punctuation.bracket.odin'
    match: '[\\[\\]]'

  'punctuation_parentheses':
    comment: '( and )'
    name: 'punctuation.parenthesis.odin'
    match: '[\\(\\)]'

  #   #####
  #  #     # ##### #####  #    #  ####  ##### #    # #####  ######  ####
  #  #         #   #    # #    # #    #   #   #    # #    # #      #
  #   #####    #   #    # #    # #        #   #    # #    # #####   ####
  #        #   #   #####  #    # #        #   #    # #####  #           #
  #  #     #   #   #   #  #    # #    #   #   #    # #   #  #      #    #
  #   #####    #   #    #  ####   ####    #    ####  #    # ######  ####

  'generic':
    match: '(\\$)([\\p{Alpha}_][\\w]*)'
    name: 'meta.type.generic.odin'
    captures:
      '1': { name: 'punctuation.type.generic.odin' }
      '2': { name: 'entity.name.type.generic.odin' }

  'block':
    begin: '({)'
    beginCaptures:
      '1': { name: 'punctuation.brace.open.odin' }
    end: '(})'
    endCaptures:
      '1': { name: 'punctuation.brace.close.odin' }
    patterns: [
      { include: '$self' }
    ]

  'variable_declarations':
    begin: '(:)\\s*((\\.\\.)?(\\^\\s*)?(\\[\\s*(\\S*)?\\s*\\]\\s*)?((int|uint|float|bool|rune|string|vector|map|bit_field|u8|u16|u32|u64|u128|f32|f64|i8|i16|i32|i128)\\b|([\\p{Alpha}_][\\w]*)))'
    beginCaptures:
        '8': { name: 'storage.type.struct.core.odin' }
        '9': { name: 'entity.name.type.odin' }
    end: '(?=,|;|\\)|})'

  'return_type':
    begin: '(->)\\s*((\\^\\s*)?(\\[\\s*(\\S*)?\\s*\\]\\s*)?((int|uint|float|bool|rune|string|vector|map|bit_field|u8|u16|u32|u64|u128|f32|f64|i8|i16|i32|i128)|([\\p{Alpha}_][\\w]*)))'
    beginCaptures:
        '1': { name: 'keyword.operator.odin' }
        '7': { name: 'storage.type.struct.core.odin' }
        '8': { name: 'entity.name.type.odin' }
    end: '(?={)'

  'function_declaration':
    # begin: '([\\p{Alpha}_][\\w]*)\\s*(::)\\s*(?=\\()'
    begin: '([\\p{Alpha}_][\\w]*)\\s*:\\s*:\\s*(proc)\\s*(?=\\()'
    beginCaptures:
      '1': { name: 'entity.name.function.odin' }
      '2': { name: 'storage.type.odin' }
    end: '(?={)'
    name: 'meta.definition.function.odin'
    patterns: [
      { include: '#variable_declarations' }
      { include: '#value_keywords' }
      { include: '#return_type' }
      { include: '#comments' }
      { include: '#operators' }
      { include: '#block' }
      { include: '#sem_processor' }
    ]

  'function_call':
    match: '\\b([\\p{Alpha}_][\\w]*)\\s*(?=\\()'
    captures:
      '1': { name: 'entity.name.function.odin' }

  'special_function_call':
    match: '\\b(new|free|append|len|cap|size_of|align_of|offset_of|assert|panic)\\s*(?=\\()'
    captures:
      '1': { name: 'support.function.core.odin' }

  'struct_declaration':
    # begin: '([\\p{Alpha}_][\\w]*)\\s*(::)\\s*(struct\\b)'
    begin: '([\\p{Alpha}_][\\w]*)\\s*:\\s*:\\s*((struct|enum|union|raw_union)\\b)'
    beginCaptures:
      '1': { name: 'entity.name.type.class.odin' }
      '2': { name: 'storage.type.core.odin' }
    end: '(?=})'
    name: 'meta.definition.struct.odin'
    patterns: [
      { include: '#variable_declarations' }
      { include: '#comments' }
    #   { include: '#block' }
      { include: '#sem_processor' }
      { include: '#operators' }
      { include: '#value_keywords' }
    ]

    # 'enum_declaration':
    #   # begin: '([\\p{Alpha}_][\\w]*)\\s*(::)\\s*(struct\\b)'
    #   begin: '(type)\\s+([\\p{Alpha}_][\\w]*)\\s+(enum\\b)'
    #   beginCaptures:
    #     '1': { name: 'storage.type.odin' }
    #     '2': { name: 'entity.name.type.class.odin' }
    #     '3': { name: 'storage.type.core.odin' }
    #   end: '(?=})'
    #   name: 'meta.definition.enum.odin'
    #   patterns: [
    #     { include: '#variable_declarations' }
    #     { include: '#comments' }
    #   #   { include: '#block' }
    #     { include: '#sem_processor' }
    #     { include: '#operators' }
    #     { include: '#value_keywords' }
    #   ]

  # 'constant_declaration':
  #   begin: '([\\p{Alpha}_][\\w]*)\\s*(::)'
  #   beginCaptures:
  #     '1': { name: 'variable.constant.odin' }
  #     '2': { name: 'keyword.operator.misc.odin' }
  #   end: '(?=;|$)'
  #   name: 'meta.definition.constant.odin'
  #   patterns: [
  #     { include: '#comments' }
  #     { include: '#expressions' }
  #   ]

  'sem_processor':
    match: '((#)(?:(foreign_library|foreign_system_library|ordered)|(\\w+)))\\b'
    captures:
      '1': { name: 'keyword.control.directive.odin' }
      '2': { name: 'punctuation.definition.directive.odin' }
      '3': { name: 'keyword.control.directive.odin' }
      '4': { name: 'invalid.illegal.odin' }
    name: 'meta.preprocessor.odin'

  #   #####
  #  #     # ###### #    # ###### #####    ##   #
  #  #       #      ##   # #      #    #  #  #  #
  #  #  #### #####  # #  # #####  #    # #    # #
  #  #     # #      #  # # #      #####  ###### #
  #  #     # #      #   ## #      #   #  #    # #
  #   #####  ###### #    # ###### #    # #    # ######

  'expressions':
    patterns: [
      { include: '#comments' }
      { include: '#sem_processor' }
      { include: '#literals' }
      { include: '#value_keywords' }
      { include: '#special_function_call' }
      { include: '#function_call' }
      { include: '#operators' }
      { include: '#punctuation' }
    ]
}

patterns: [

    { include: '#variable_declarations' }
    { include: '#function_declaration' }
    # { include: '#enum_declaration' }
    { include: '#struct_declaration' }
  { include: '#expressions' }
  { include: '#control' }
  { include: '#imports' }
  { include: '#punctuation' }
  { include: '#modifiers' }
  { include: '#other_keywords' }

  # Structures
  { include: '#block' }
  # { include: '#constant_declaration' }
]
